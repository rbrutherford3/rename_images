#!/bin/bash

# Script to change filenames of images according to their
# exif data creation date or the date in their filename

# Requires exiftools

# Need root path
if [[ -z "$1" ]]
then
	echo "No path provided"
	exit 1
fi
root_path="$1"

# Validate root path
if [[ -d "$root_path" ]]
then
	if [[ "$root_path" != "/" ]]
	then
		root_path=${root_path%/}
	fi
else
	echo "Error renaming file: root directory does not exist"
	exit 1
fi

# Get directory of this script for referring to other scripts
script_directory=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")

# Set counts to zero
let processed_count=0
let renamed_count=0
let exif_changed_count=0

# Define external file paths
exiftool_args="${script_directory}/rename_images.args"
dates_file="${script_directory}/rename_images_dates.tsv"
results="${script_directory}/rename_images_results.tsv"
rename_file="${script_directory}/rename_file"

# Create or re-create tabulated results file
echo -e "Original filepath\tDate\tRename output" > "$results"

# Create or reset exiftool args file
if [[ -f "$exiftool_args" ]]
then
	rm "$exiftool_args"
fi
touch "$exiftool_args"

# Generate table of filenames and their creation dates
exiftool -r -m -T -filepath -DateTimeOriginal "${root_path}" > "${dates_file}"

# Loop through files gathered from exiftool file
while IFS=$'\t' read -r f create_date
do
	# Parse filename
    filename=$(basename -- "$f")
    extension="${filename##*.}"
    filename="${filename%.*}"
    
    # Assign prefix based on whether it's an image, video, or screenshot
	prefix="IMG"
	if [[ "${extension,,}" == "mp4" ]] || [[ "${extension,,}" == "mpeg4" ]]
	then
		prefix="VID"
	fi
	if [[ "${filename:0:2}" == "SS" ]] || [[ "${filename:0:10}" == "Screenshot" ]]
	then
		prefix="SS"
	fi
	
	# Clear variables
	nums=""
	status=""
	date_found=false
	exif_date_found=false
	exif_date_changed=false
	file_rename_output=""
	formatted_date_time=""
	#date_string=""
	new_filename=""
	year=""
	
	# Initialize date digits
	nums="${filename//[!0-9]/}" # Get numbers from filename
	let len_nums=${#nums}
	year="${nums:0:4}" # Year is always the first four numbers
	month="01"
	day="01"
	hour="00"
	minute="00"
	second="00"
	current_year="$(date +%Y)"
	
	# Get creation date from exif data if it exists
	if [[ "${create_date}" =~ ^[0-9]{4}:[0-9]{2}:[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]
	then
		year="${create_date:0:4}"
		month="${create_date:5:2}"
		day="${create_date:8:2}"
		hour="${create_date:11:2}"
		minute="${create_date:14:2}"
		second="${create_date:17:2}"
		status="EXIF DATE FOUND"
		exif_date_found=true
		date_found=true
		let processed_count++
		
	# Parse numbers in filename if no exif data
	else
		if [[ ${year#0} -gt ${current_year#0} || ${year#0} -lt 1900 ]]
		then
			status="UNKOWN FORMAT WITH INVALID YEAR"
		else
			# Parse date based on number of numerical digits in filename
			if [[ ${#filename} -le 40 ]]
			then
				if [[ ${len_nums#0} -gt 18 ]]
				then
					status="TOO MANY NUMBERS WITH VALID YEAR"
					let processed_count++
				elif [[ ${len_nums#0} -ge 16 ]]
				then
					month="${nums:4:2}"
					day="${nums:6:2}"
					hour="${nums:8:2}"
					minute="${nums:10:2}"
					second="${nums:12:2}"
					status="PROCESSED"
					date_found=true
					let processed_count++
				elif [[ ${len_nums#0} -ge 14 ]]
				then
					month="${nums:4:2}"
					if [[ "${filename}" =~ ^[^0-9]*[0-9]{6}[^0-9][0-9]{6}[^0-9][0-9]{2}(.*)$ ]]
					then
						hour="${nums:6:2}"
						minute="${nums:8:2}"
						second="${nums:10:2}"
						status="PROCESSED"
						date_found=true
						let processed_count++
					else
						day="${nums:6:2}"
						hour="${nums:8:2}"
						minute="${nums:10:2}"
						second="${nums:12:2}"
						status="PROCESSED"
						date_found=true
						let processed_count++
					fi
				elif [[ ${len_nums#0} -ge 12 ]]
				then
					month="${nums:4:2}"
					hour="${nums:6:2}"
					minute="${nums:8:2}"
					second="${nums:10:2}"
					status="PROCESSED"
					date_found=true
					let processed_count++
				elif [[ ${len_nums#0} -ge 8 ]]
				then
					month="${nums:4:2}"
					day="${nums:6:2}"
					status="PROCESSED"
					date_found=true
					let processed_count++
				else
					status="UNKOWN FORMAT WITH VALID YEAR"
					let processed_count++
				fi
			else
				status="UNKOWN FORMAT WITH VALID YEAR"
				let processed_count++
			fi
		fi
	fi
	
	# Rename file if there was a date found (either in exif data or filename)
	if [[ "$date_found" == true ]]
	then
		# There are no '0' months or days
		if [[ "$month" == "00" ]]
		then
			month="01"
		fi
		if [[ "$day" == "00" ]]
		then
			day="01"
		fi
		
		# Define new file name based on date numbers
		new_filename="${prefix}_${year}${month}${day}_${hour}${minute}${second}"
		# Format date for exif data
		formatted_date_time="${year}:${month}:${day} ${hour}:${minute}:${second}"
		# Rename file and get output
		file_rename_output="$(${rename_file} "${f}" "${new_filename}")"
		exit_code="$?"
		
		# Define filename based on results of file rename
		if [[ "$exit_code" == "0" ]]
		then
			current_f="$file_rename_output"
			let renamed_count++
		elif [[ "$exit_code" == "2" ]]
		then
			current_f="$f"
		fi
	fi
	
	# Update exif data date if it doesn't exist with new date from filename
	if [[ "$exif_date_found" == false ]] && [[ "$date_found" == true ]] && [[ "$exit_code" != 1 ]]
	then
		echo "-m" >> "$exiftool_args"
		echo "-overwrite_original" >> "$exiftool_args"
		echo "-dateTimeOriginal=\"${formatted_date_time}\"" >> "$exiftool_args"
		echo "$current_f" >> "$exiftool_args"
		echo "-execute" >> "$exiftool_args"
		echo "" >> "$exiftool_args"
		exif_date_changed=true
		let exif_changed_count++
	fi
	
	# Output
	echo "$f"
	if [[ "$date_found" == true ]]
	then
		echo "${formatted_date_time}"
		echo "$file_rename_output"
	else
		echo "No date found in file"
	fi
		
	if [[ "$exif_date_changed" == true ]]
	then
		echo "exif date updated"
	else
		echo "No exif date update"
	fi
	echo ""
	
	# Tabulate results in an output file
	echo -e "${f}\t${formatted_date_time}\t${file_rename_output}" >> "${results}"
done < "${dates_file}"

# Change all exif data dates at once
if [[ ${exif_changed_count#0} > 0 ]]
then
	exiftool -@ "$exiftool_args"
fi

# Final output
echo "$processed_count files processed"
echo "$renamed_count files renamed"
echo "$exif_changed_count dates changed in EXIF data"
echo ""

exit 0
